LINEAR SEARCH(A, key)
1. found = 0
2. for i = 1 to A.length
3. if A[ i ] = key
4. found = 1
5. return i
6. if found = 0
7. return 0



INSERTION SORT(A)
1. for j=2 to A.length
2. key = A[ j ];
3. //Insert A[ j ] into the sorted sequence A[1...j-1]
4. i = j-1
5. while i > 0 and A[ i ] > key
6. A[ i+1 ]=A[ i ]
7. i=i-1
8. A[ i+1 ]= key



BinarySearch (A, m, n, k)
if (m>n) return -1; //Base Case
mid=(m+n)/2
if A[mid]=k return mid; //Base Case
else if k < A[mid]
BinarySearch(A, m, mid-1, k)
else if k > A[mid]
BinarySearch(A, mid+1, n, k)


PARTITION (A, p, r)
1 x A[r]
2 i p - 1
3 for j = p to r - 1
4 do if A[j] <= x
5 then i=i+1
6 Exchange A[i] withA[j]
7 Exchange A[i +1] withA[r]
8 return i +1


Pseudo code of Quick Sort
QUICKSORT(A, p, r)
1 if p < r
2 then q â€” PARTITION(A, p, r)
3 QUICKSORT(A, p, q-1)
4 QUICKSORT(A, q+1, r)